<?php

namespace Phpbr\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Pagerfanta\Adapter\DoctrineORMAdapter;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{

    /**
     * @param null $qty
     *
     * @return array
     */
    public function listRecentArticles($qty = null) {

        $query = $this->createQueryBuilder('Article')
            ->where('Article.published = :flagPublished')
            ->andWhere('Article.approved = :approved')
            ->orderBy('Article.approvedAt', 'DESC')
            ->setParameters(array(
                'flagPublished' => true,
                'approved' => true
            ));

        if (is_numeric($qty)) $query->setMaxResults($qty);

        $query = $query->getQuery();

        return $query->getResult();
    }

    /**
     * Retorna Adapter for pagerfanta (pagination)
     *
     * @return DoctrineORMAdapter
     */
    public function listActiveArticlesAdapter() {

        $query = $this->createQueryBuilder('Article')
            ->where('Article.published = :flagPublished')
            ->andWhere('Article.approved = :approved')
            ->orderBy('Article.score', 'DESC')
            ->addOrderBy('Article.publishedAt', 'DESC')
            ->setParameters(array(
                'flagPublished' => true,
                'approved' => true
            ));

        $pagerfantaAdapter = new DoctrineORMAdapter($query);

        return $pagerfantaAdapter;
    }

    /**
     * @param $user
     *
     * @return DoctrineORMAdapter
     */
    public function listUserArticles($user) {

        $query = $this->createQueryBuilder('Article')
            ->where('Article.user = :user')
            ->orderBy('Article.score', 'DESC')
            ->addOrderBy('Article.id', 'DESC')
            ->setParameter('user', $user);

        $pagerfantaAdapter = new DoctrineORMAdapter($query);

        return $pagerfantaAdapter;
    }

    /**
     * Lista todos os artigos, independentemente de seu status
     * @return array
     */
    public function listArticlesAdmin() {

        $query = $this->createQueryBuilder('Article')
            ->andWhere('Article.published = true')
            ->orderBy('Article.publishedAt', 'ASC');

        return $query->getQuery()->getResult();
    }

}

